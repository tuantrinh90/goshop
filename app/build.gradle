buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.goshop.app"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res/layouts/layouts-notification',
                    'src/main/res/layouts/layouts-settings',
                    'src/main/res/layouts/layouts-search',
                    'src/main/res/layouts/layouts-myorder',
                    'src/main/res/layouts/layouts-login',
                    'src/main/res/layouts/layouts-home',
                    'src/main/res/layouts/layouts-category',
                    'src/main/res/layouts/layouts-account',
                    'src/main/res/layouts/layouts-checkout',
                    'src/main/res/layouts/layouts-shopping',
                    'src/main/res/layouts',
                    'src/main/res/layout',
                    'src/main/res/'
            ]
        }
    }

    signingConfigs {
        sign
    }

    productFlavors {

        staging {
            buildConfigField "String", "SERVICE_API_URL", String.format("\"%s\"", stagingServerUrl)
        }

        live {
            buildConfigField "String", "SERVICE_API_URL", String.format("\"%s\"", liveServierUrl)
        }
    }

    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            testCoverageEnabled = true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.sign
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    def appDependencies = rootProject.ext.appDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies
    def testDependencies = rootProject.ext.testDependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile appDependencies.appcompat_v7
    compile appDependencies.support_v4
    compile appDependencies.androidDesign
    compile appDependencies.recyclerView
    compile appDependencies.cardView
    compile appDependencies.constraintlayout
    annotationProcessor appDependencies.butternifeCompiler
    compile appDependencies.butternife
    compile appDependencies.okhttp_logging
    compile appDependencies.glide
    compile appDependencies.glide_okhttp
    compile appDependencies.rxJava
    compile appDependencies.rxAndroid
    compile appDependencies.retrofit
    compile appDependencies.retrofit_gson
    compile appDependencies.retrofit_rxjava
    compile appDependencies.javaxAnnotation
    compile appDependencies.rxBinding
    compile appDependencies.rxLifecycle
    compile appDependencies.rxLifecycleAndroidLifecycle
    compile appDependencies.rxLifeCycleComponents
    compile appDependencies.multiDex
    compile appDependencies.androidLifecycleRuntime
    compile appDependencies.androidLifecycleExtensions
    compile appDependencies.androidLifecycleCompiler
    compile appDependencies.systembartint
    compile appDependencies.logger
    compile appDependencies.facebook

    compile appDependencies.dagger2
    annotationProcessor appDependencies.daggerComiler
    compile(appDependencies.permissionsdispatcher) {
        exclude module: "support-v13"
    }
    compile(appDependencies.crashlyticsSdk) {
        transitive = true
    }
    annotationProcessor appDependencies.permissionsdispatcherprocessor

    debugCompile developmentDependencies.leakCanaryDebug
    releaseCompile developmentDependencies.leakCanaryRelease
    testCompile developmentDependencies.leakCanaryTest


    testCompile testDependencies.junit
    androidTestCompile(testDependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }
}

def ksFile = rootProject.file('keystore.properties')
def props = new Properties()
if (ksFile.canRead()) {
    props.load(new FileInputStream(ksFile))
    if (props != null) {
        android.signingConfigs.sign.storeFile file(props['KEYSTORE_FILE'])
        android.signingConfigs.sign.storePassword props['KEYSTORE_PASSWORD']
        android.signingConfigs.sign.keyAlias props['KEYSTORE_ALIAS']
        android.signingConfigs.sign.keyPassword props['KEYSTORE_ALIAS_PASSWORD']
    } else {
        println 'some entries in \'keystore.properties\' not found!'
    }
} else {
    println '\'keystore.properties\' not found!'
}
